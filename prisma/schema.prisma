// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model User {
    id            Int      @id @default(autoincrement())
    name          String
    email         String   @unique
    emailVerified DateTime?
    userType      String
    cognitoId     String?  @unique
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    pololas       Polola[]
    amigos        Amigo[]
    sessions      Session[]
    posts         Post[]
    accounts      Account[]
}

model Polola {
    id            Int      @id @default(autoincrement())
    name          String
    email         String   @unique
    phone         String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    userId        Int
    user          User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Amigo {
    id            Int      @id @default(autoincrement())
    name          String
    email         String   @unique
    phone         String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    userId        Int
    user          User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Session {
    id            Int      @id @default(autoincrement())
    userId        Int
    sessionToken  String   @unique
    expires       DateTime
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById Int

    @@index([name])
    @@index([createdById])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@index([identifier])
}

